# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push: # Push to any branches
  pull_request: # Pull requests only to main
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup-development-ubuntu:
    name: Setup Django and PostgreSQL
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: Gr1N/setup-poetry@v7

      - name: Poetry virtual environment cache
        uses: actions/cache@v2
        env:
          cache-name: poetry-env-cache
        with:
          path: /home/runner/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-build-${{ env.cache-name }}-pyproj-${{ hashFiles('pyproject.toml')}}-lock-${{ hashFiles('poetry.lock')}}

      - name: Setup Poetry
        run: |
          cd $GITHUB_WORKSPACE/Python
          poetry install
          poetry run python -m django --version

      # postgresql example taken from : https://www.cybertec-postgresql.com/en/postgresql-github-actions-continuous-integration/
      - name: Start PostgreSQL
        run: |
          sudo systemctl start postgresql.service
          pg_isready

      - name: Create django's user
        env:
          PG_USER: ${{ secrets.PG_USER }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
        run: |
          sudo -u postgres psql --command="CREATE USER $PG_USER;"
          sudo -u postgres psql --command="ALTER USER $PG_USER WITH ENCRYPTED PASSWORD '$PG_PASSWORD';"
          sudo -u postgres psql --command="ALTER ROLE $PG_USER SET client_encoding TO 'utf8';"
          sudo -u postgres psql --command="ALTER ROLE $PG_USER SET default_transaction_isolation TO 'read committed';"
          sudo -u postgres psql --command="ALTER ROLE $PG_USER SET timezone TO 'UTC';"
          sudo -u postgres psql --command="ALTER ROLE $PG_USER WITH CREATEDB;"

      - name: Create database
        env:
          PG_USER: ${{ secrets.PG_USER }}
          PG_DBNAME: ${{ secrets.PG_DBNAME }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
        run: |
          sudo -u postgres createdb --owner="$PG_USER" "$PG_DBNAME"
          PGPASSWORD="$PG_PASSWORD" psql --username="$PG_USER" --host=localhost --list

      - name: Create schema
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          PG_USER: ${{ secrets.PG_USER }}
          PG_DBNAME: ${{ secrets.PG_DBNAME }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
        run: |
          cd $GITHUB_WORKSPACE/Python/prokaryote
          #PG_USER="$PG_USER" PG_PASSWORD="$PG_PASSWORD" PG_DBNAME="$PG_DBNAME"
          poetry run python manage.py dbexec $GITHUB_WORKSPACE/Database/create-schema.sql
          poetry run python manage.py inspectdb
